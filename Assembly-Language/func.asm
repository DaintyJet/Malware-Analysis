; Assembly language comment begins with a semicolon (;)
; ----------------------------------------------------------------------------
; func.asm
; This is a Win32 console program that uses a function to compute an addition sum and prints out the result.
; It needs to be linked with Windows libraries.
;
; Assemble: nasm -f win func.asm
; Link: golink /console func.obj msvcrt.dll kernel32.dll
; MSVCRT.DLL is the C standard library for the Visual C++ (MSVC).
; ----------------------------------------------------------------------------

; declare entry point. 
; If you do not specify the entry point with the command switch GoLink assumes START will be used 
global start

; extern declares a symbol not defined in the module being assembled, 
; but in some other module and needs to be referred to by this one
; if one module declares a symbol as EXTERN and refers to it, 
; some other module must actually define the symbol and declare it as GLOBAL
extern printf	;from msvcrt. MSVCRT. DLL is the C standard library for the Visual C++ (MSVC) compile
extern ExitProcess	;from kernel32

section	.data	; declaring data section

; Allocating storage space for initialized data, variable frmt
; From the NASM documentation: The colon after a label is also optional.
frmt:	db '%d',0	; Declare a character string "%d", where 0 is the null terminator

section .text	; declaring text (code) section
func:	; function label
    xor eax, eax	; exclusive or and save into eax. 0 as a result
    mov eax, 10	; move 10 into eax
    add eax, 5	; add 5 into eax
    ret	; return

start:	; entry point
	; call func. 
	; It does the following: push return address of func (address of push eax) onto stack; jumps to func
	call func	
	
	push eax	; push eax onto stack. esp+=4
	push frmt	; push frmt (an address) onto stack. esp+=4
	call	printf	; call printf. equivalent printf(frmt, eax)
	
	add	esp, 8	; add 8 into esp, which points to the top of the stack
	push	0	; push 0 onto the stack. 
	call	ExitProcess	; call ExitProcess. Equivalent to ExitProcess(0)

