; Assembly language comment begins with a semicolon (;)
; ----------------------------------------------------------------------------
; power.asm
; This is a gcc command line application to compute x^y, where x and y are integers.
;
; Assemble: nasm -f win power.asm
; Link: gcc -m32 power.obj -o power.exe
; ----------------------------------------------------------------------------

	global	_main ; “Entry” point for the gcc linker 
	extern	_atoi ; Need the external function atoi
	extern	_printf ; Need the external function printf

	section	.text ; Declaration of the code section
_main:
	push	ebx ; save registers that must be saved, ebx, esi and edi for cdecl convention
	push	esi
	push	edi

	mov	eax, [esp+16] ; argc (it's not at [esp+4] now :-))
	cmp	eax, 3 ; must have exactly two arguments
	jne	error1 ; Not 3, jmp to error1 and exit
	mov	ebx, [esp+20] ; argv
	push	dword [ebx+4] ; prepare the stack for the 1st parameter argv[1] to atoi
	call	_atoi ; convert argv[1] to integer
	add	esp, 4 ; restore the stack changed by line 22
	mov	esi, eax ; x in esi. Recall eax contains the return result of atoi
	push	dword [ebx+8] ; prepare the stack for the second parameter to atoi
	call	_atoi ; convert argv[2] to integer
	add	esp, 4 ; restore the stack changed by line 26
	cmp	eax, 0 ; any atoi conversion error?
	jl	error2 ; <0, there is error, jump to error2 and exit
	mov	edi, eax ; y in edi
	mov	eax, 1 ; start with answer = 1
check:
	test	edi, edi ; we're counting y down to 0
	jz      gotit ; done
	imul	eax, esi ; multiply in another x, doing
	dec	edi ; 
	jmp	check
gotit:	; print report on success
	push    eax
	push    answer
	call    _printf
	add     esp, 8
	jmp	done
error1:	; print error message
	push	badArgumentCount
	call	_printf
	add	esp, 4
	jmp	done
error2:	; print error message
	push	negativeExponent
	call	_printf
	add	esp, 4
done:	; restore saved registers
	pop	edi
	pop	esi
	pop	ebx
	ret

	section	.data ; Declaration of the code section
answer:
	db      '%d', 10, 0 ; 10 is \n and 0 is null
badArgumentCount:
	db	'Requires exactly two arguments', 10, 0
negativeExponent:
	db	'The exponent may not be negative', 10, 0
tstDQ:
	dq 123456789

